Plans

Front End
Plot the Major Pages which are the Home and Admin.
used css modules
react spring and framer motions for the animations.
used material UI for the icons and for some UI

1. Header
   a. used redux to handle the state of changing the color of header background and logo color
2. Front Page
   a. used framer motion to animate the JOL logo
   b. used framer motion to load the video after set time
3. Chuch Events
   a. used useReducer to handle the complexity of the state
   b. create the data.js for the church events.
   c. This will eventually go to mongoDB and will be the resting place of the events posted by the Admin
   d. created a seedRouter to post the static data used for development to mongoDb

   // learnt - big lesson for asynchronous JS. this is where I experienced and resolve issues when getting data from a BE serer. Initially the component is working fine when the churchEvents data is in local. However, it changes and throw an error looking for the array because it needs to load the component first before the aailability of the array. The issue was resolved after below code was treated asynchronously by using a reducer and use the loading state as a initial state to load so that the array can be imported to the app.

   const [churchEvents, setchurchEvents] = useState([]);
   useEffect(()=>{
   const fetchData = async () => {
   const result = await axios.get('/church-events')
   setChurchEvent(result.data)
   }
   fetchData()
   }, [])

   const [{ churchEvents, error, loading }, dispatch] = useReducer(
   logger(reducer),
   {
   churchEvents: [],
   error: "",
   loading: true,
   }
   );

   useEffect(() => {
   const fetches = async () => {
   dispatch({ type: "FETCH_CHURCHEVENTS_REQUEST" });
   try {
   const r = await axios.get("/church-events");
   dispatch({ type: "FETCH_CHURCHEVENTS_SUCCESS", payload: r.data });
   } catch (err) {
   dispatch({ type: "FETCH_CHURCHEVENTS_FAIL", payload: err.message });
   }

   setchurchEvents(r.data);
   };
   fetches();
   }, []);

4. Ministries
   a. used react-spring
   b. to flip the pictures on hover 5. Footer
   a. used MUI icons
   b. will use email function 6. Log In component
   a. used the glass morphism
   b. implemented form validation principles
   c. implementation of bcrypt \*

Future implementations for Pages \*
a. React-router-dom
b. helmet

BackEnd Development
used express

1. Create the server.js, mongooose, dotenv, cors, body-parser
2. set localhost:7000 as the proxy to get the content of data.js
3. create the churchEvents router and send the local data
   app.get("/jol", (req, res) => {
   res.send(data);
   }); >>> this will eventually be replcae by churchEventsRoute.js in which the data will be coming form mongoDb. See 2. replace the local data

4. After connection to MongoDB (outlined below) create the model schemas and routers

> > > Implementation of Routing

1. plan is to create routing and shift the view from home to admin page upon successful sign in
2. Implement a dependency called helmet to display the route name in the browser
3. npm i react-router-dom
4. after installation:
   a. wrap the App and the components that needs the routing by <BrowserRouter /> >>> <Routes />
   b. Define the elements route ie; <Route path='/' element={<Home />}/>

> > > Connection to Mongo DB

1.  Create an atlas mongoDb
2.  install local mongoDb
3.  implement mongoose
4.  connect to mongo Db
5.  create new project
6.  in daTABASe click on collections --- add my own data
7.  in databses click connect >>> connect to application >>> drivers >>> then copy the code provided
8.  mongodb+srv:shernof:<password>@cluster0.ilwymnp.mongodb.net/JoyOfLife?retryWrites=true&w=majority >>> replace password
9.  create a .env file in the backend; set a variable name MONGODB_URI and pase the link provided by the mongodb;
10. IGNORE THE .ENV IN THE MAIN GIT >>> npm i dotenv
11. install npm i mongoose in the server folder
12. configure the server.js
13. see 1. a connection to mongoDB at server js

- optional running local - https://www.mongodb.com/docs/manual/administration/install-community/
- https://www.mongodb.com/products/compass <<< installer

seeding the data.js to mongoDB

1.  Create events, team and users model
2.  create it inside a model folder inside the server folder
3.  see ChurchEvents.js
4.  Create the seed route -
5.  create routes folder inside the server folder, can name it as routes; create the seedRoutes.js
6.  use the route in server.js
7.  seed sample events

> > > Deployment to Heroku

1. create GIT repo and .gitignore at the root directory
2. Create Heroku acct >>> ok
3. INstall heroku CLI
   install brew and run this in the terminal >>> brew tap heroku/brew && brew install heroku
   https://devcenter.heroku.com/articles/heroku-cli#install-the-heroku-cli
4. heroku login >>> in the terminal >>> then login

5. heroku apps:create joyoflife >>> heroku will then issue an  
   acknowledgement page of the app created

6. move the localhost:7000 to joyoflife
7. edit package.json in the root directory for build script >>>
   "script": "cd jolcm && npm install && pm run build"
8. Set the "engines": {"node": "12.4.0", "npm": "6.9.0"} >>> this is to
   set the version of node and npm to this versions in the heroku
9. Create ProcFile in the root directory
   This is to set the initial command to run the website
   it will run after the installation of all package and will launch the app
10. Create cloud mongoDb atlas >>> https://cloud.mongodb.com
    - setup the network access
    - allow access anywhere 0.0.0.0/0
    - at database access >>> add new database user set the username and pw
    - create the name of the app
    - in COnnect >>> select connect your application and copy the code provided. input
      the username and password
    - in the terminal >>> heroku config:set MONGODB_URL="mongodb+srv://shernof:GodisGood78\*@cluster0.ilwymnp.mongodb.net/JoyOfLife?retryWrites=true&w=majority"
    - heroku config:set SKIP_PREFLIGHT_CHECK=true
11. refresh the heroku dashboard to see the app

- settings >>> Reveal Coding Vars >>> above settings will be visible

12. commit the changes to git repo and push it to heroku repo

- on the fork icon >>> enter comment like "publish to heroku"

13. in the terminal >>> git push heroku

14. In server.js, app.use(express.static(path.join(**dirname, '/build')))
    app.get('\*', (req, res)=>{
    res.sendFile(path.join(**dirname, '/build/index.html'))
    })

15. Set db connection in env
16. commit and push

Issues encountered in deployment

1. at=error code=H10 desc="App crashed" method=GET path="/" host=joyoflife-e41eff580354.
   herokuapp.com request_id=741c1e0e-5057-4ff0-b06b-17fdd73b2322 fwd="124.187.246.230" dyno= connect= service= status=503 bytes= protocol=https

   resolved by installing the backend app in the main directories and reflected in main's package.json

2. babel warning - added it as a dependency
3. he `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first
   parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

   mongodb+srv://shernof:GodisGood78\*@cluster0.ilwymnp.mongodb.net/JoyOfLife?retryWrites=true&w=majority

   mongodb+srv://shernof:GodisGood78\*@cluster0.ilwymnp.mongodb.net/JoyOfLife?retryWrites=true&w=majority

   resolved the issue by: heroku config:set MONGODB_URI="mongodb+srv://shernof:GodisGood78\*@cluster0.ilwymnp.mongodb.net/JoyOfLife?retryWrites=true&w=majority"

   should be MONGODB_URI and not MONGODB_URL as the server.js and .env variable - MONGODB_URI

4. 'secretOrPrivateKey must have a value after heroku deploy' issue
   used `${process.env.JWT_SECRET}` instead of process.env.JWT_SECRET

   upload post image

   1. npm i multer

   Uploading Image files to AWS S#

   1. create AWS acct https://s3.console.aws.amazon.com
   2. create public bucket as jolcm - select Sydney as access point.  
      uncheck all the blocks public access options
   3. create api key and secret
      click name then security credentials
      select access keys and create new
   4. paste it into .env as accessKeyId and secretAccessKey
   5. move .env to config.js
   6. add accessKeyId and secretAccessKey to config.js
   7. npm i aws-sdk multer-s3
   8. routes/uploadRoute.js
   9. set aws.config.update to nfig values
   10. create s3 from new awss3()
   11. create storageS3 from multerS3
   12. et uploadS3as multer({storage: storages3})
   13. router.post('/s3', uploads3.ingle('image'))
   14. check result on website and s3
